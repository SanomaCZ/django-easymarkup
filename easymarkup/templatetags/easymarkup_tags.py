import logging
from django import template

from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe

from easymarkup.cache import get_from_cache

logger = logging.getLogger(__name__)

register = template.Library()


@register.filter(is_safe=True)
def markdown(obj, arg=''):
    """
    Runs Markdown over a given object property, optionally using safe_mode
    python-markdown2 supports.

    Syntax::

        {{ obj|markdown:"field [, safe]" }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    args in the list.
    """
    args = [e for e in arg.split(",") if e]
    if len(args) > 0 and hasattr(obj, args[0]):
        field = getattr(obj, args[0])
        if len(args) > 1 and args[1] == "safe":
            safe_mode = True
        else:
            safe_mode = False
        result = get_from_cache(obj, field, safe_mode=safe_mode)
    else:
        return force_unicode(obj)
    return mark_safe(result)


class RenderNode(template.Node):
    def __init__(self, obj, field):
        self.obj = template.Variable(obj)
        self.field = template.Variable(field)

    def render(self, context):
        try:
            obj = self.obj.resolve(context)
        except template.VariableDoesNotExist:
            return ''

        if isinstance(self.field, template.Variable):
            field = self.field.resolve(context)

        if not hasattr(obj, field):
            logger.error("object '%s' has not field '%s' " % (obj, field))
            return ''

        text = get_from_cache(obj, field, safe_mode=True)

        template_name = 'render-markup-%s-%s' % (self.obj, self.field)
        return template.Template(text, name=template_name).render(context)


@register.tag('render_markup')
def do_render(parser, token):
    """
    Renders a field using python-markdown2.

    Syntax::

        {% render_markup obj "field" %}

    Example::

        {% render_markup comment "text" %}
    """
    bits = token.split_contents()

    if len(bits) != 3:
        raise template.TemplateSyntaxError('Usage: {% render_markup <object> <field> %}')

    return RenderNode(bits[1], bits[2])
